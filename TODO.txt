----------------

Clamp the contact area between radar limits.
Area is an Ellipse bounded by the annulus sector of the radar.
Maybe a composite shape type that takes multiple shapes and 'masks' them together.

----------------

Work in some actual error handling.
Would be useful to have an error handler at the top level that prints the last 5 or so unhandled
errors.

----------------

Look at rust gui / event loop architecture for ideas on how to add common behaviour between ship
classes / roles.

----------------

Create more concrete types around Vec2 and f64 to differentiate beteen point/vector, angle/distance,
etc. (maybe even relative/absolute).

struct AbsolutePoint(Point)
struct RelativePoint{point: Point, reference: Point} <- could reference be a const generic?

----------------

Integrate a Kalman filter to increase accuracy of radar contacts.

----------------

For navigation - maybe some kind of maneuver type consisting of nodes. Each node has time and action
associated.

----------------

Look into event driven architecture.
For higher level behaviour, we're mostly interested in reacting to events that ocurr over mutiple
ticks. Would Async be a good fit here?

Ship sub-modules i.e. radar, should notify the ship of events (e.g. new contact, search rotation
complete, etc).

Would an ECS help avoid issues with communiction between ships + submodules?
At top level:

struct ShipECS {
    class: [Class],
    behaviour: [Behaviour],
    radar: [Radar],
}

----------------
